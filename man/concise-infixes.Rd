% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/infix.R
\name{concise-infixes}
\alias{concise-infixes}
\alias{\%from\%}
\alias{\%to\%}
\alias{\%as\%}
\alias{\%to_na\%}
\alias{\%with\%}
\title{Infix functions}
\usage{
input \%from\% domain

from \%to\% codomain

x \%as\% type

from \%to_na\% codomain

expr \%with\% data
}
\arguments{
\item{input}{A vector of values to map (must contain only elements in the
domain vector).}

\item{domain}{A domain vector of unique elements to map from.}

\item{from}{The output of \verb{\%from\%} (see examples).}

\item{codomain}{A codomain vector of elements to map the input to (must be of
equal length to \code{domain}).}

\item{x}{A list or vector to be coerced to another type.}

\item{type}{The desired output type for \code{x}. May be provided as a bare name
(e.g. \code{dbl}), a character string (e.g. "double"), or any other expression
that evaluates to a single string understood by \code{\link[base:vector]{base::as.vector()}}. In
addition to the \code{mode} values supported by \code{\link[base:vector]{base::as.vector()}}, this
function recognises the shortcuts \code{lgl}, \code{int}, \code{dbl}, \code{chr}, \code{list}, \code{df},
\code{dfc}, and \code{dfr}.}

\item{expr}{Any simple R expression to be evaluated.}

\item{data}{A data frame or named list to be used as the local environment
for evaluating \code{expr}.}
}
\description{
Infix functions for mapping from one vector to another. \code{\%from\%} and
\code{\%to\%} should be used in sequence as ternary operators to map an input
from a domain vector to a codomain vector by position. \code{\%to_na\%} follows
the same syntax but returns \code{NA} when the input is not present in the domain.
\code{\%with\%} can follow an expression to evaluate that expression using a
list or data frame as the environment for evaluation. See examples.
}
\examples{
# Map a sequence of letters to their numerical positions in the alphabet
c("d", "o", "g") \%from\% letters \%to\% 1:26


# Map US states to their abbreviations
c("California", "Virginia", "Texas") \%from\% state.name \%to\% state.abb


# Coerce an object to a different type using `\%as\%`
list(a = 1:3, b = 4:6) \%as\% dfc


# Map character names to species using the dplyr::starwars dataset
data("starwars", package = "dplyr")
c("Han Solo", "R2-D2", "Chewbacca") \%from\% name \%to\% species \%with\% starwars


# Find mean height of characters in the starwars dataset
mean(height, na.rm = TRUE) \%with\% starwars

}
